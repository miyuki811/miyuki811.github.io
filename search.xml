<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>kali搭建常见靶场以及shell生成器的部署</title>
      <link href="/2023/10/05/1/"/>
      <url>/2023/10/05/1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前我们介绍了kali的安装和基础部署，后续需要进行网络安全的系统性学习，则必然离不了靶场的安装，接下来将详细介绍几门常用靶场以及相关的安装、使用方式。</p></blockquote><p><strong>声明不要在未经允许的情况下进行任何网络计算机渗透，禁止对任意政务、教育、公益服务进行渗透，如果需要测试请自行搭建靶场环境，本系列教程仅用于学习，通过本文中教程造成的任何恶意行为，均由操作者负责</strong></p><h2 id="1-Kali中安装docker、docker-compose"><a href="#1-Kali中安装docker、docker-compose" class="headerlink" title="1. Kali中安装docker、docker-compose"></a>1. Kali中安装docker、docker-compose</h2><h4 id="1-1-docker、docker-compose安装"><a href="#1-1-docker、docker-compose安装" class="headerlink" title="1.1 docker、docker-compose安装"></a>1.1 docker、docker-compose安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt install -y docker.io</span><br><span class="line"></span><br><span class="line">apt-get install python3-pip</span><br><span class="line"></span><br><span class="line">pip3 install docker-compose</span><br></pre></td></tr></table></figure><h4 id="1-2-设置docker开机自启动"><a href="#1-2-设置docker开机自启动" class="headerlink" title="1.2 设置docker开机自启动"></a>1.2 设置docker开机自启动</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker</span><br><span class="line"></span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h2 id="2-安装pikachu、xss挑战、sqli-labs和dvwa"><a href="#2-安装pikachu、xss挑战、sqli-labs和dvwa" class="headerlink" title="2. 安装pikachu、xss挑战、sqli-labs和dvwa"></a>2. 安装pikachu、xss挑战、sqli-labs和dvwa</h2><h4 id="2-1-安装pikachu、xss挑战、sqli-labs和dvwa"><a href="#2-1-安装pikachu、xss挑战、sqli-labs和dvwa" class="headerlink" title="2.1 安装pikachu、xss挑战、sqli-labs和dvwa"></a>2.1 安装pikachu、xss挑战、sqli-labs和dvwa</h4><p>dvwa靶场记得修改dvwa-security level中的impossible为其他任意三项。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -itd --restart always --name dvwa  -p 8000:80 sagikazarmark/dvwa</span><br><span class="line"></span><br><span class="line">sudo docker run -itd --restart always --name sqli-labs -p 8001:80 -p 13306:3306 acgpiano/sqli-labs</span><br><span class="line"></span><br><span class="line">sudo docker run -itd --restart always --name xss -p 8002:80 c0ny1/xss-challenge-tour</span><br><span class="line"></span><br><span class="line">sudo docker run -itd --restart always --name pikachu -p 8003:80 -p 3306:3306  area39/pikachu</span><br></pre></td></tr></table></figure><p>上述靶场端口分别为8000、8001、8002、8003，默认为开机自启动且始终自重启，后续需要进行调整的话可以自行修改上述docker命令。</p><h2 id="3-安装vulhub以及使用"><a href="#3-安装vulhub以及使用" class="headerlink" title="3. 安装vulhub以及使用"></a>3. 安装vulhub以及使用</h2><p>vulhub上面有大量的漏洞环境，可以通过docker-compose轻松复刻出来一个组件相关的CVE漏洞，无需搭建其他前置环境和冗余配置，更无需下载超大镜像，使用容器轻松构建漏洞环境，一键部署一键销毁。<a href="https://github.com/vulhub/vulhub">git地址</a>。</p><h4 id="3-1-安装vulhub"><a href="#3-1-安装vulhub" class="headerlink" title="3.1 安装vulhub"></a>3.1 安装vulhub</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/vulhub/vulhub/archive/master.zip -O vulhub-master.zip</span><br><span class="line"></span><br><span class="line">unzip vulhub-master.zip</span><br></pre></td></tr></table></figure><p>如果没有unzip的话可以使用<code>apt -install -y unzip</code>进行安装。</p><h4 id="3-2-漏洞构建和停止"><a href="#3-2-漏洞构建和停止" class="headerlink" title="3.2 漏洞构建和停止"></a>3.2 漏洞构建和停止</h4><p>使用<code>cd vulhub-master</code>进入目录，查看需要构建的漏洞环境，例如需要构建spring&#x2F;CVE-2016-4977的漏洞环境，则使用<code>cd  spring/CVE-2016-4977</code>命令进入相关的CVE漏洞环境，然后执行<code>docker compose build</code>和<code>docker compose up -d</code>，即可启动漏洞环境，当需要停止时在当前目录执行<code>docker compose down -v</code>即可停止docker容器。</p><h2 id="4-hack-the-box"><a href="#4-hack-the-box" class="headerlink" title="4. hack the box"></a>4. hack the box</h2><h4 id="4-1-连接hack-the-box以及注意事项"><a href="#4-1-连接hack-the-box以及注意事项" class="headerlink" title="4.1 连接hack the box以及注意事项"></a>4.1 连接hack the box以及注意事项</h4><p>每当安装靶场环境时是不是下载镜像文件痛苦万分？每当遇到镜像和虚拟机不兼容是不是懊恼不已？每当配置不同靶场虚拟机网络是不是让你心神焦虑？现在有了hack the  box统统不用怕（就是比较贵，大概十多刀一个月，白嫖的话会延迟比较高，vip有新加坡节点的vpn，连接的话非常快），再也不用下该死的镜像文件和配置网络环境了。直接通过<a href="https://app.hackthebox.com/invite">主页</a>注册账号。<br>注册成功登录后点击连接htb。<br><a href="https://imgse.com/i/pPxXKNq"><img src="https://z1.ax1x.com/2023/10/10/pPxXKNq.png" alt="点击连接htb"></a><br>点击连接靶机。<br><a href="https://imgse.com/i/pPxXB8K"><img src="https://z1.ax1x.com/2023/10/10/pPxXB8K.png" alt="点击连接htb"></a><br>选择openvpn方式。<br><a href="https://imgse.com/i/pPxXDgO"><img src="https://z1.ax1x.com/2023/10/10/pPxXDgO.png" alt="选择openvpn方式"></a><br>选择合适的靶机服务地址并下载vpn文件地址。<br><a href="https://imgse.com/i/pPxXyKe"><img src="https://z1.ax1x.com/2023/10/10/pPxXyKe.png" alt="选择合适的靶机服务地址并下载vpn文件地址。"></a></p><p>将下载好的openvpn文件放入kali。kali自带openvpn，直接使用命令<code>openvpn 下载的vpn文件名</code>即可启动，如果不想使用了则可以通过<code>ctrl+C</code>断开vpn连接，接着找到htb的侧边栏中的machines，挑选自己合适的靶机，点击创建靶机，稍等片刻即可拿到靶机ip，就可以开始对靶机进行<del>扫描</del>测试了。<br>此时通过在kali中输入命令<code>ip addr</code>可以看见一个tun0的网卡信息，这个ip地址是靶机反弹shell时连接的ip。<br><a href="https://imgse.com/i/pPxOxnH"><img src="https://z1.ax1x.com/2023/10/10/pPxOxnH.jpg" alt="反弹shell地址"></a></p><h2 id="5-shell-生成器"><a href="#5-shell-生成器" class="headerlink" title="5. shell 生成器"></a>5. shell 生成器</h2><h4 id="5-1-部署shell生成器"><a href="#5-1-部署shell生成器" class="headerlink" title="5.1 部署shell生成器"></a>5.1 部署shell生成器</h4><p>背shell生成代码背吐了，msf shell、bash shell、nc shell、python shell、php shell，数不胜数，由于靶机限制又经常只有部分可用，网站上临时去找又有太多重复和失效的，直到某天我在菱角社区看到了reverse-shell-generator，下面简单介绍一下部署方式，使用方式大概看一眼就明白了。<a href="https://www.revshells.com/">在线地址</a>，<a href="https://github.com/0dayCTF/reverse-shell-generator">git仓库</a>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/0dayCTF/reverse-shell-generator/archive/refs/heads/main.zip -O reverse-shell-generator.zip</span><br><span class="line"></span><br><span class="line">unzip reverse-shell-generator.zip</span><br><span class="line"></span><br><span class="line">cd reverse-shell-generator-main</span><br><span class="line"></span><br><span class="line">docker build -t reverse_shell_generator .</span><br><span class="line"></span><br><span class="line">docker run -d -p 80:80 --restart always reverse_shell_generator</span><br></pre></td></tr></table></figure><p>展示效果<br><a href="https://imgse.com/i/pPxXCNt"><img src="https://z1.ax1x.com/2023/10/10/pPxXCNt.jpg" alt="shell"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> 靶场 </tag>
            
            <tag> shell generator </tag>
            
            <tag> xss </tag>
            
            <tag> pikachu </tag>
            
            <tag> dvwa </tag>
            
            <tag> sqli-labs </tag>
            
            <tag> vulhub </tag>
            
            <tag> hack the box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware安装Kali、基础属性、网络配置及可视化Clash部署</title>
      <link href="/2023/04/15/1/"/>
      <url>/2023/04/15/1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Kali是网络安全中必不可少需要接触操作系统，其中包含了大量的信息收集、漏洞分析、维权、逆向等工具，而今天则是详细的概述一下Kali操作系统的安装步骤、常用配置。由于部分安全工具需要在Github上下载，所以会讲解可视化界面如何配置Clash便于学习。</p></blockquote><p><strong>声明不要在未经允许的情况下进行任何网络计算机渗透，禁止对任意政务、教育、公益服务进行渗透，如果需要测试请自行搭建靶场环境，本系列教程仅用于学习，通过本文中教程造成的任何恶意行为，均由操作者负责</strong></p><h2 id="1-Kali镜像获取和安装"><a href="#1-Kali镜像获取和安装" class="headerlink" title="1. Kali镜像获取和安装"></a>1. Kali镜像获取和安装</h2><h4 id="1-1-Kali官网和不同版本区别"><a href="#1-1-Kali官网和不同版本区别" class="headerlink" title="1.1 Kali官网和不同版本区别"></a>1.1 Kali官网和不同版本区别</h4><p>Kali的官网是<a href="https://www.kali.org/">https://www.kali.org</a>，然后点击页面中的download按钮则会跳转到kali所有的<a href="https://www.kali.org/get-kali">下载页</a>，如下图所示，一般常用的安装方式都依次为</p><ul><li><em>Install Images</em> 实体服务器安装，能够更加完整的进行控制硬件，能够完整利用服务器内部模块的WIFI和GPU，下载完成后是iso镜像文件</li><li><em>Virtual Machines</em> 虚拟机安装，下载完成之后会是一个压缩包解压后使用VMware打开即可</li><li><em>ARM</em> 一般用于树莓派设备安装Kali</li><li><em>Mobile</em> 移动安卓设备安装Kali</li><li><em>Cloud</em> 云端安装Kali</li></ul><p><a href="https://imgse.com/i/p9Ek760"><img src="https://s1.ax1x.com/2023/04/21/p9Ek760.png" alt="Kali"></a></p><p>但是一般会选用iso镜像安装，因为可以自己更加灵活的分配硬件参数，所以点击Install Images后会跳转到下载页面。其中Installer是较为稳定的自定义离线安装版，只需要下载即可，可以自定义安装策略，后续的Weekly则是每周更新的最新版，但是会比较不稳定，Everything则是安装全部工具的镜像包比较大，而NetInstaller则是通过网络来安装所有包，一般直接点击Installer即可开始下载。</p><p><a href="https://imgse.com/i/p9EAinK"><img src="https://s1.ax1x.com/2023/04/21/p9EAinK.png" alt="kali"></a></p><h4 id="1-2-安装配置"><a href="#1-2-安装配置" class="headerlink" title="1.2 安装配置"></a>1.2 安装配置</h4><p>下载完成可以得到一个iso镜像文件，打开VMware，点击新增虚拟机，选择类型配置为经典类型，下一步选择安装程序光盘映像文件，此路径为1.1中下载完成后的iso文件路径。</p><p><a href="https://imgse.com/i/p9EEErV"><img src="https://s1.ax1x.com/2023/04/21/p9EEErV.png" alt="安装配置.png"></a></p><p>点击下一步</p><p><a href="https://imgse.com/i/p9EEtaD"><img src="https://s1.ax1x.com/2023/04/21/p9EEtaD.png" alt="安装配置.png"></a></p><p>点击下一步，指定虚拟机名称，指定虚拟机文件存放路径，接下来一直点击下一步即可完成，也可以依据自己机器配置手动设置分配给虚拟机的CPU核数、内存大小（一般可视化界面推荐为8G）、硬盘空间大小。<br>将镜像文件导入到VMware中生成虚拟机后，打开虚拟机，点击回车，等待数秒后会进入系统语言选择界面，选择适合自己的语言和国家地区，会开始安装介质等待数秒即可。<br><a href="https://imgse.com/i/p9EVkJH"><img src="https://s1.ax1x.com/2023/04/21/p9EVkJH.png" alt="安装配置.png"></a><br>命名主机名笔者一般默认都是kali，域名填写可以直接留白，用户名和密码一般也都设置为kali。<br><a href="https://imgse.com/i/p9EZrE8"><img src="https://s1.ax1x.com/2023/04/21/p9EZrE8.png" alt="安装配置.png"></a><br>接下来一直点击继续按钮，直到出现询问是否创建空分区表选择是即可，则会开始安装基础的Kali系统，进行APT源配置，等待安装完成后，点击继续按钮默认安装相关软件即可，等待安装完成，会提示是否安装GRUB启动引导器到主驱动器选择是点击继续按钮，会要求选择安装启动引导器的设备，选择&#x2F;dev&#x2F;sda点击继续即可完成安装。<br><a href="https://imgse.com/i/p9EQiRS"><img src="https://s1.ax1x.com/2023/04/21/p9EQiRS.png" alt="安装配置.png"></a></p><h2 id="2-Kali安装后体验优化"><a href="#2-Kali安装后体验优化" class="headerlink" title="2. Kali安装后体验优化"></a>2. Kali安装后体验优化</h2><h4 id="2-1-root密码修改"><a href="#2-1-root密码修改" class="headerlink" title="2.1 root密码修改"></a>2.1 root密码修改</h4><p>由于Kali内部很多工具执行都需要root权限，而默认Kali在安装系统的时候只是让我们创建了一个子账号，所以在执行命令时会经常提示权限不足，那么可以通过修改root密码，每次使用root账户登录即可。<br>具体的操作步骤为，使用1.2中的kali账号登录Kali系统，按住Ctrl+Alt+T则可以快捷打开命令行输入<code>sudo passwd root</code>，则会提示你输入root的新密码，笔者此处也是用的kali，修改完成会提示重启服务，重启使用root和刚设置的密码即可实现root账户登录Kali。<br><a href="https://imgse.com/i/p9EGsa9"><img src="https://s1.ax1x.com/2023/04/21/p9EGsa9.png" alt="p9EGsa9.png"></a></p><h4 id="2-2-设置中文输入法"><a href="#2-2-设置中文输入法" class="headerlink" title="2.2 设置中文输入法"></a>2.2 设置中文输入法</h4><p>使用root用户登录后会发现在使用过程中有场景需要输入中文的情况，则需要安装iBus，在安装iBus之前需要对Kali的源进行更新，打开命令行输入<code>apt-get update</code>回车，接着输入<code>apt-get upgrade</code> 更新源中的相关软件，可能需要长时间的等待，在更新完成之后，输入<code>apt-get install -y ibus ibus-pinyin</code>即可。<br>当安装完毕之后选择左上角的Kali图标点击设置选择输入法，一直选择确定或是，然后勾选iBus点击确定即可指定输入法为iBus输入法。<br><a href="https://imgse.com/i/p9EUK0O"><img src="https://s1.ax1x.com/2023/04/21/p9EUK0O.png" alt="设置中文输入法.png"></a><br>之后选择左上角的Kali图标点击设置选择iBus首选项，选择启动iBus然后可以进行iBus的配置，可以设置切换输入法的快捷键，笔者此处选的Ctrl+Space，如果不需要使用五笔输入法，则可以点击输入法删除中文-Bopomofo这一栏，当然可以按照自己喜好进行配置，配置完成后重启系统，中文输入法即可生效。<br><a href="https://imgse.com/i/p9ENgTe"><img src="https://s1.ax1x.com/2023/04/21/p9ENgTe.png" alt="设置中文输入法.png"></a></p><h2 id="3-Kali固定IP到主机内网环境"><a href="#3-Kali固定IP到主机内网环境" class="headerlink" title="3. Kali固定IP到主机内网环境"></a>3. Kali固定IP到主机内网环境</h2><h4 id="3-1-修改虚拟机网络配置和Kali网络配置"><a href="#3-1-修改虚拟机网络配置和Kali网络配置" class="headerlink" title="3.1 修改虚拟机网络配置和Kali网络配置"></a>3.1 修改虚拟机网络配置和Kali网络配置</h4><p>由于在进行渗透测试时需要众多虚拟机进行通讯，所以需要修改Kali的网络配置，首先需要打开VMware，点击虚拟机选择设置，选择网络适配器修改为桥接模式。<br><a href="https://imgse.com/i/p9EaU2R"><img src="https://s1.ax1x.com/2023/04/21/p9EaU2R.png" alt="修改虚拟机网络配置.png"></a><br>继续打开VMware，点击编辑选择虚拟网络编辑器，选择更改设置，将Vmnet0修改为桥接模式-自动<br><a href="https://imgse.com/i/p9EaodS"><img src="https://s1.ax1x.com/2023/04/21/p9EaodS.png" alt="修改虚拟机网络配置.png"></a><br>首先在本地主机上打开命令行，一般Windows输入ipconfig，Linux输入ifconfig，如果主机是Wifi连接则查看无线局域网适配器 WLAN，如果是网线连接则查看以太网适配器，此处拿笔者本地实例，本机用的Wifi则查看相关的三个属性IPv4地址、子网掩码、默认网关。<br><a href="https://imgse.com/i/p9EwHvn"><img src="https://s1.ax1x.com/2023/04/21/p9EwHvn.png" alt="修改虚拟机网络配置.png"></a><br>接下来进入Kali中设置固定ip，Kali中的子网掩码和默认网关是一与主机一致的，IPv4地址设置任意一个网关范围内的不冲突的即可，笔者此处设置的是192.168.31.100，可以使用可视化界面设置也可以通过命令行设置，此处稍微简单介绍一下可视化界面的设置方式，点击右上角的网口图标，选择编辑连接，点击IPv4设置，选择方法为手动，输入地址、子网掩码和网关即可<br><a href="https://imgse.com/i/p9EBc0P"><img src="https://s1.ax1x.com/2023/04/21/p9EBc0P.png" alt="修改虚拟机网络配置.png"></a><br><a href="https://imgse.com/i/p9E0odK"><img src="https://s1.ax1x.com/2023/04/21/p9E0odK.png" alt="修改虚拟机网络配置.png"></a><br>设置完成后重启点击网络，右键网口图标，选择连接信息，变更为手动设置的结果即可。<br><a href="https://imgse.com/i/p9E00rq"><img src="https://s1.ax1x.com/2023/04/21/p9E00rq.png" alt="修改虚拟机网络配置.png"></a><br>后续需要输入ping指令ping主机ip，如果能正确ping通则说明配置正确，如果无法ping通则需要额外考虑主机的防火墙是否关闭，Windows防火墙未关闭的情况下是无法响应ping指令。</p><h2 id="4-可视化Clash安装"><a href="#4-可视化Clash安装" class="headerlink" title="4. 可视化Clash安装"></a>4. 可视化Clash安装</h2><h4 id="4-1-安装Clash"><a href="#4-1-安装Clash" class="headerlink" title="4.1 安装Clash"></a>4.1 安装Clash</h4><p>Clash for windows是一个可视化的Clash管理工具，具备多端可视化显示，首先打开<a href="https://github.com/Fndroid/clash_for_windows_pkg/tags">Clash for windows</a>的下载界面，选择任意版本点击，选中Assets中的x64-linux.tar.gz<br><a href="https://imgse.com/i/p9EYy1x"><img src="https://s1.ax1x.com/2023/04/21/p9EYy1x.png" alt="安装Clash.png"></a><br>下载并解压，解压完成之后查看文件中的cfw文件是否具备权限，在解压文件夹中右键选择在这里打开终端，然后输入<code>./cfw --no-sandbox</code>即可唤醒Clash for windows。<br><a href="https://imgse.com/i/p9EBNTK"><img src="https://s1.ax1x.com/2023/04/21/p9EBNTK.png" alt="安装Clash.png"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> 服务部署 </tag>
            
            <tag> 基础运维 </tag>
            
            <tag> Clash </tag>
            
            <tag> Clash for windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LRU页面缓存淘汰算法实现</title>
      <link href="/2022/12/10/1/"/>
      <url>/2022/12/10/1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>LRU页面缓存淘汰算法，由于内存较为可贵，所以在系统设计中要秉持着将热数据长久存在内存缓存中而冷数据则被淘汰掉的思想，常见应用场景为数据库的缓存页。实质上是对数据进行操作的时候，查询缓存中是否存在，如果存在则将其位置调整到缓存头部，如果不存在则存入缓存并将其放入缓存头部。当放入缓存时超过指定的缓存大小则淘汰掉缓存数据最尾部的数据。</p></blockquote><h2 id="1-实现方式和各自的优劣"><a href="#1-实现方式和各自的优劣" class="headerlink" title="1.实现方式和各自的优劣"></a>1.实现方式和各自的优劣</h2><ol><li>使用数组实现，数组检索速度比较快，但是增删速度比较慢而LRU算法可能会频繁的进行在缓存中增删的操作，所以在此并不推荐。<br>2.使用双向链表实现，但是链表检索效率极其低下，而LRU本质上还是要查询选定内容是否存在缓存中，所以在此也不推荐。<br>3.通过Hash表加双向链表的方式进行数据存储，使用Hash表的key存放需要缓存的数据唯一标记，用val存放双向链表的节点信息，而双向链表的节点中保存数据以及它的前置、后置节点信息。</li></ol><h4 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">package com.peachl.demo.lru;</span><br><span class="line"></span><br><span class="line">import cn.hutool.core.util.ObjectUtil;</span><br><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author: peach l</span><br><span class="line"> * @date: 2022-09-20  17:21</span><br><span class="line"> * @description:</span><br><span class="line"> */</span><br><span class="line">// TODO 可以针对synchronized进行优化，可以提升部分效率</span><br><span class="line">@Data</span><br><span class="line">public class CustomCache&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    // 游标</span><br><span class="line">    private static Integer index;</span><br><span class="line">    // 缓存最大长度</span><br><span class="line">    private static Integer maxSize;</span><br><span class="line"></span><br><span class="line">    private Node&lt;T&gt; first = new Node&lt;&gt;();</span><br><span class="line">    private Node&lt;T&gt; last = new Node&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    private Map&lt;Integer, Node&gt; cache;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static class Node&lt;T&gt; &#123;</span><br><span class="line">        private Node&lt;T&gt; pre;</span><br><span class="line">        private Node&lt;T&gt; next;</span><br><span class="line">        private Integer key;</span><br><span class="line">        private T data;</span><br><span class="line"></span><br><span class="line">        public Node() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Node(Integer k, T obj) &#123;</span><br><span class="line">            key = k;</span><br><span class="line">            data = obj;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 初始化CustomCache</span><br><span class="line">    public CustomCache() &#123;</span><br><span class="line">        first.next = last;</span><br><span class="line">        last.pre = first;</span><br><span class="line">        maxSize = 3;</span><br><span class="line">        index = 1;</span><br><span class="line">        cache = new HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 存</span><br><span class="line">    public synchronized Map put(Integer id, T obj) &#123;</span><br><span class="line">        Node oldNode = cache.get(id);</span><br><span class="line">        if(ObjectUtil.isEmpty(oldNode)) &#123;</span><br><span class="line">            // 判断是否超长，超长则删除最后的元素</span><br><span class="line">            if(index &gt; maxSize) &#123;</span><br><span class="line">                removeLast();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Node&lt;T&gt; newNode = new Node&lt;&gt;(id, obj);</span><br><span class="line">            // 如果是首次插入需要初始化first和last</span><br><span class="line">            if(index.equals(1)) &#123;</span><br><span class="line">                first = newNode;</span><br><span class="line">                last = newNode;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                moveToHead(newNode);</span><br><span class="line">            &#125;</span><br><span class="line">            index++;</span><br><span class="line">            cache.put(id, newNode);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            ifExisted(oldNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return cache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 拿</span><br><span class="line">    public synchronized Object get(Integer id) &#123;</span><br><span class="line">        // 获取缓存</span><br><span class="line">        Node oldNode = cache.get(id);</span><br><span class="line">        if(ObjectUtil.isNotEmpty(oldNode)) &#123;</span><br><span class="line"></span><br><span class="line">            // 当不是第一个时才会进行解除绑定和移到最前面的效果</span><br><span class="line">            ifExisted(oldNode);</span><br><span class="line"></span><br><span class="line">            return oldNode.data;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 如果存在则进行解除和移动两部操作</span><br><span class="line">    private void ifExisted(Node oldNode) &#123;</span><br><span class="line">        // 当不是第一个时才会进行解除绑定和移到最前面的效果</span><br><span class="line">        if (!oldNode.equals(first)) &#123;</span><br><span class="line">            // 解除原有绑定</span><br><span class="line">            unbind(oldNode);</span><br><span class="line">            // 移动到最前方</span><br><span class="line">            moveToHead(oldNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 解除当前节点绑定的所有其他节点</span><br><span class="line">    private void unbind(Node node) &#123;</span><br><span class="line">        // 解除原有绑定</span><br><span class="line">        if(!node.equals(first)) &#123;</span><br><span class="line">            node.pre.next = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        if(ObjectUtil.isEmpty(node.next)) &#123;</span><br><span class="line">            last = node.pre;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            node.next.pre = node.pre;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 移动指定节点到缓存头部</span><br><span class="line">    private void moveToHead(Node node) &#123;</span><br><span class="line">        first.pre = node;</span><br><span class="line">        node.next = first;</span><br><span class="line">        first = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 移除缓存尾部最后一位数据</span><br><span class="line">    private void removeLast() &#123;</span><br><span class="line">        cache.remove(last.key);</span><br><span class="line">        last.pre.next = null;</span><br><span class="line">        last = last.pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 迭代</span><br><span class="line">    public void iterator() &#123;</span><br><span class="line">        if(ObjectUtil.isNotEmpty(first)) &#123;</span><br><span class="line">            iterator(first);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(&quot;collection is empty&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 迭代递归方法体</span><br><span class="line">    private Node iterator(Node node) &#123;</span><br><span class="line">        if(ObjectUtil.isNotEmpty(node.next)) &#123;</span><br><span class="line">            return iterator(node.next);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LRU </tag>
            
            <tag> 算法 </tag>
            
            <tag> 缓存算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓手机安装Termux安装Kali和开启内网穿透教程</title>
      <link href="/2022/11/05/1/"/>
      <url>/2022/11/05/1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>突然想起来安卓可以安装Termux和Kali，最近比较喜欢研究网络安全，所以正好换个手机，整了台小米12S Pro，但是总不能抱着手机一通点，影响不太好，所以还需要整个内网穿透。</p></blockquote><h2 id="1-安装Termux"><a href="#1-安装Termux" class="headerlink" title="1. 安装Termux"></a>1. 安装Termux</h2><p>项目地址👉 <a href="https://github.com/termux/termux-app/">Termux </a>，安装完毕后更新源。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 更新下载源</span><br><span class="line">sed -i &#x27;s@^\(deb.*stable main\)$@#\1\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/termux-packages-24 stable main@&#x27; $PREFIX/etc/apt/sources.list  </span><br><span class="line"></span><br><span class="line">// 更新软件</span><br><span class="line">pkg update</span><br><span class="line"></span><br><span class="line">// 版本升级新增软件</span><br><span class="line">pkg upgrade</span><br></pre></td></tr></table></figure><h2 id="2-开启SSH服务"><a href="#2-开启SSH服务" class="headerlink" title="2. 开启SSH服务"></a>2. 开启SSH服务</h2><p>开始安装SSH。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 安装SSH服务</span><br><span class="line">pkg install openssh</span><br><span class="line"></span><br><span class="line">// 设置SSH远程连接密码，需要输入两次</span><br><span class="line">passwd</span><br><span class="line"></span><br><span class="line">// 重启Termux后启动SSH服务，Termux的SSH服务启动端口为8022，切记不是22</span><br><span class="line">sshd</span><br><span class="line"></span><br><span class="line">// 获取SSH登录用户名，该名称为SSH远程登录用户名</span><br><span class="line">whoami</span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/zpU7NV"><img src="https://s1.ax1x.com/2022/11/10/zpU7NV.jpg" alt="开启SSH服务.jpg"></a></p><p>在Xshell中尝试连接后制作自启动脚本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 编辑或新建启动脚本</span><br><span class="line">nano  ~/.bashrc</span><br><span class="line"></span><br><span class="line">// 编写SSH启动脚本</span><br><span class="line">echo &quot;用户：&quot;$(whoami)</span><br><span class="line">if pgrep -x &quot;sshd&quot; &gt;/dev/null</span><br><span class="line">  then</span><br><span class="line">    echo &quot;SSH运行中...&quot;</span><br><span class="line">  else</span><br><span class="line">    sshd</span><br><span class="line">    echo &quot;启动SSH&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">// Ctrl+X退出，退出时会询问你是否保存按Y即可</span><br></pre></td></tr></table></figure><p>重新连接即可。</p><h2 id="3-内网穿透"><a href="#3-内网穿透" class="headerlink" title="3. 内网穿透"></a>3. 内网穿透</h2><p>FRP服务端安装参考👉 <a href="https://www.kexi.link/2021/12/01/1/">&lt;&lt;编写Linux中frp自启动脚本&gt;&gt;</a>。</p><p>FRP客户端安装，需要知道你的内核用的是什么架构，输入<code>uname -m</code><br>返回内容如下图，对比选择正确的frp版本，下载地址。<br><a href="https://imgse.com/i/zpUTA0"><img src="https://s1.ax1x.com/2022/11/10/zpUTA0.jpg" alt="内网穿透.jpg"></a><br>下载完成之后，解压并修改自己的frpc.ini文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 解压</span><br><span class="line">tar -zxvf frp_0.45.0_linux_arm64.tar.gz</span><br><span class="line"></span><br><span class="line">// 进入frp目录并编辑配置，</span><br><span class="line">cd frp_0.45.0_linux_arm64</span><br><span class="line">vi frpc.ini</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 修改配置</span><br><span class="line">[common]</span><br><span class="line">// frps服务ip，切记不能写域名</span><br><span class="line">server_addr = xxx</span><br><span class="line">// frps服务端口</span><br><span class="line">server_port = 7000</span><br><span class="line">// frps加密token</span><br><span class="line">token = xxx</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line">// 无需改动</span><br><span class="line">type = tcp</span><br><span class="line">// 无需改动</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">// 映射本地端口，因为要穿透Termux中的SSH所以是8022</span><br><span class="line">local_port = 8022</span><br><span class="line">// 远程机器映射8022的端口，随便写</span><br><span class="line">remote_port = 8022</span><br><span class="line"></span><br><span class="line">// 退出编辑后进行验证，打印启动日志即为正常，CTRL+C退出测试</span><br><span class="line">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure><p>测试效果如下，由于已经启动了frp，所以会提示端口被占用：<br><a href="https://imgse.com/i/zpUq9U"><img src="https://s1.ax1x.com/2022/11/10/zpUq9U.jpg" alt="内网穿透.jpg"></a></p><p>进入安装目录输入pwd，会得到项目地址：</p><p><a href="https://imgse.com/i/zkfpRK"><img src="https://s1.ax1x.com/2022/11/14/zkfpRK.jpg" alt="内网穿透.jpg"></a></p><p>接下来编辑自启动脚本，frp启动是阻塞的，所以需要使用nohup挂起到后台执行，否则进入Termux会卡住不动，启动时会提示你没有指定nohup日志地址，由于frp自己有日志地址，我懒得处理了就这样吧，强迫症可以指定一下地址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 编辑或新建启动脚本</span><br><span class="line">nano  ~/.bashrc</span><br><span class="line"></span><br><span class="line">// 在源文件后面新增脚本，切记将frp路径改为自己的，修改完毕后保存退出</span><br><span class="line">echo &quot;用户：&quot;$(whoami)</span><br><span class="line">if pgrep -x &quot;frp&quot; &gt;/dev/null</span><br><span class="line">  then</span><br><span class="line">    echo &quot;frp运行中...&quot;</span><br><span class="line">  else</span><br><span class="line">    // 下面的路径替换为自己的frp安装路径，启动时会提示你没有指定nohup日志地址，懒得处理了就这样吧</span><br><span class="line">    nohup /data/data/com.termux/files/home/tools/frp_0.45.0_linux_arm64/frpc -c /data/data/com.termux/files/home/tools/frp_0.45.0_linux_arm64/frpc.ini &amp;</span><br><span class="line">    echo &quot;启动frp&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="4-安装Kali"><a href="#4-安装Kali" class="headerlink" title="4. 安装Kali"></a>4. 安装Kali</h2><p>剽窃一下Kali官网的安装命令，进行安装，kali用户名密码都是kali。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">termux-setup-storage</span><br><span class="line"></span><br><span class="line">pkg install wget</span><br><span class="line"></span><br><span class="line">// 下载安装包</span><br><span class="line">wget -O install-nethunter-termux https://offs.ec/2MceZWr</span><br><span class="line"></span><br><span class="line">// 安装</span><br><span class="line">chmod +x install-nethunter-termux</span><br><span class="line"></span><br><span class="line">//启动Kali</span><br><span class="line">./install-nethunter-termux</span><br></pre></td></tr></table></figure><h2 id="5-参考文献"><a href="#5-参考文献" class="headerlink" title="5. 参考文献"></a>5. 参考文献</h2><p>frp部署文档参考 👉 <a href="https://gofrp.org/docs/setup/">《安装frp》</a>- frp官方文档<br>Termux安装kali文档参考 👉 <a href="https://www.kali.org/docs/nethunter/nethunter-rootless/#installation">《Termux安装kali》</a>- Kali官方文档</p>]]></content>
      
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> 服务部署 </tag>
            
            <tag> Termux </tag>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDD领域驱动设计</title>
      <link href="/2022/03/05/1/"/>
      <url>/2022/03/05/1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>领域驱动设计理念，以业务主体为代码设计的骨架，通过业务中的限界上下文划分子域，完美的契合微服务的服务拆分理念，将微服务的服务拆分提供业务依据</p></blockquote><h4 id="1-主要流程"><a href="#1-主要流程" class="headerlink" title="1. 主要流程"></a>1. 主要流程</h4><p>领域驱动设计主要分为战略设计和战术设计，战略设计由领域专家组织产品、开发、销售等关键人员进行事件风暴会议，然后梳理出来重点的事件流，依据事件流绘制出领域图，定义通用语言，通过领域图定义限界上下文来划分核心子域、支持子域和通用子域，划分完成后进行战术设计，定义好实体、值对象、聚合、聚合根、领域服务、应用服务、领域事件、仓储、工厂等关键模型。</p><h4 id="2-战略设计"><a href="#2-战略设计" class="headerlink" title="2. 战略设计"></a>2. 战略设计</h4><h5 id="2-1-事件风暴会议"><a href="#2-1-事件风暴会议" class="headerlink" title="2.1 事件风暴会议"></a>2.1 事件风暴会议</h5><p>由当前业务相关的领域专家发起或主持，产品、开发、销售人员都参加，围绕业务关键要点绘制事件流</p><h5 id="2-2-事件流"><a href="#2-2-事件流" class="headerlink" title="2.2 事件流"></a>2.2 事件流</h5><p>事件流分为读模型、操作者、决策命令、外部系统、聚合、事件、策略等模块组成，加上部分描述信息组成完成的事件流，将所有的查询操作放入读模型有利于后续的CQRS中查询、命令的落地。</p><p>事件流的绘制是需要非常规范的一套流程，需要领域专家传递出来业务要点然后大家进行补充，需要所有人都参与到讨论当中。后续会详细出一篇博客介绍事件流绘制流程和要点。</p><h5 id="2-3-限界上下文和子域"><a href="#2-3-限界上下文和子域" class="headerlink" title="2.3 限界上下文和子域"></a>2.3 限界上下文和子域</h5><p>通过限界上下文将事件流划分为不同子域，以是否为核心业务来判断子域的类型，核心子域为该领域的最核心业务，例如商城领域中的支付、商品子域都是核心子域，支持子域则是辅助核心子域的例如促销子域、客服子域等，通用子域则是第三方接口划分出来的子域，例如短信子域、第三方物流平台、第三方支付平台。</p><h4 id="3-战术设计"><a href="#3-战术设计" class="headerlink" title="3. 战术设计"></a>3. 战术设计</h4><p>未完待续…</p>]]></content>
      
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> DDD </tag>
            
            <tag> 领域驱动设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper集成seata</title>
      <link href="/2022/01/02/1/"/>
      <url>/2022/01/02/1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>因为不喜欢nacos，太大很臃肿很多功能没必要，所以使用注册中心和配置中心均为zookeeper，然后基于zookeeper搭建了一个后端微服务脚手架。犯蠢忘了不同服务用的是不同数据库，但是自己测试的时候偷懒只用了一个数据库，导致分布式事务始终不生效，后来拆分数据库，测试正常。zookeeper推荐使用ZK UI导入配置文件。另在Seata 1.4.2版本中数据库中时间字段不能使用datetime类型否则会引起序列化错误。</p></blockquote><h4 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-zookeeper-config --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-zookeeper-config&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-zookeeper-discovery --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-zookeeper-discovery&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- seata连接zk 默认连接器，不剔除就狂报错 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.101tec&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;zkclient&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.11&lt;/version&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- seata --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.seata&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;seata-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="2-编写consumer和provider的yml"><a href="#2-编写consumer和provider的yml" class="headerlink" title="2. 编写consumer和provider的yml"></a>2. 编写consumer和provider的yml</h4><h5 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: consumer</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev # 不指定这个参数在使用zookeeper作为配置中心会报错</span><br><span class="line">  cloud:</span><br><span class="line">    zookeeper:</span><br><span class="line">      enabled: true  # true:开启zookeeper外部化配置, false:读取本地配置; 需要将config.watcher.enabled同时设置</span><br><span class="line">      connect-string: 127.0.0.1:2181</span><br><span class="line">      discovery:</span><br><span class="line">        register: true</span><br><span class="line">        enabled: true</span><br><span class="line">        root: /cloud-service</span><br><span class="line">      config:</span><br><span class="line">        enabled: true</span><br><span class="line">        root: /cloud-config</span><br><span class="line">        watcher:</span><br><span class="line">          enabled: true</span><br></pre></td></tr></table></figure><h5 id="提供者"><a href="#提供者" class="headerlink" title="提供者"></a>提供者</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: provider</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br><span class="line">  cloud:</span><br><span class="line">    zookeeper:</span><br><span class="line">      enabled: true  # true:开启zookeeper外部化配置, false:读取本地配置; 需要将config.watcher.enabled同时设置</span><br><span class="line">      connect-string: 127.0.0.1:2181</span><br><span class="line">      discovery:</span><br><span class="line">        register: true</span><br><span class="line">        enabled: true</span><br><span class="line">        root: /cloud-service</span><br><span class="line">      config:</span><br><span class="line">        enabled: true</span><br><span class="line">        root: /cloud-config</span><br><span class="line">        watcher:</span><br><span class="line">          enabled: true</span><br></pre></td></tr></table></figure><h4 id="3-服务消费者和提供者启动类"><a href="#3-服务消费者和提供者启动类" class="headerlink" title="3. 服务消费者和提供者启动类"></a>3. 服务消费者和提供者启动类</h4><p>启动类上面都新增@EnableDiscoveryClient注解</p><h4 id="4-将seata配置文件导入zookeeper配置中心"><a href="#4-将seata配置文件导入zookeeper配置中心" class="headerlink" title="4. 将seata配置文件导入zookeeper配置中心"></a>4. 将seata配置文件导入zookeeper配置中心</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">/seata=client.log.exceptionRate=100</span><br><span class="line">/seata=client.report.retry.count=5</span><br><span class="line">/seata=client.rm.asyncCommitBufferLimit=10000</span><br><span class="line">/seata=client.rm.lockRetryInternal=10</span><br><span class="line">/seata=client.rm.lockRetryPolicyBranchRollbackOnConflict=true</span><br><span class="line">/seata=client.rm.lockRetryTimes=30</span><br><span class="line">/seata=client.rm.reportRetryCount=5</span><br><span class="line">/seata=client.rm.reportSuccessEnable=false</span><br><span class="line">/seata=client.rm.sqlParserType=druid</span><br><span class="line">/seata=client.rm.tableMetaCheckEnable=false</span><br><span class="line">/seata=client.tm.commitRetryCount=5</span><br><span class="line">/seata=client.tm.rollbackRetryCount=5</span><br><span class="line">/seata=client.undo.dataValidation=true</span><br><span class="line">/seata=client.undo.logSerialization=jackson</span><br><span class="line">/seata=client.undo.logTable=undo_log</span><br><span class="line">/seata=metrics.enabled=false</span><br><span class="line">/seata=metrics.exporterList=prometheus</span><br><span class="line">/seata=metrics.exporterPrometheusPort=9898</span><br><span class="line">/seata=metrics.registryType=compact</span><br><span class="line">/seata=server.maxCommitRetryTimeout=-1</span><br><span class="line">/seata=server.maxRollbackRetryTimeout=-1</span><br><span class="line">/seata=server.recovery.asynCommittingRetryPeriod=1000</span><br><span class="line">/seata=server.recovery.committingRetryPeriod=1000</span><br><span class="line">/seata=server.recovery.rollbackingRetryPeriod=1000</span><br><span class="line">/seata=server.recovery.timeoutRetryPeriod=1000</span><br><span class="line">/seata=server.rollbackRetryTimeoutUnlockEnable=false</span><br><span class="line">/seata=server.undo.logDeletePeriod=86400000</span><br><span class="line">/seata=server.undo.logSaveDays=7</span><br><span class="line">/seata=service.default.grouplist=127.0.0.1:8091</span><br><span class="line">/seata=service.disableGlobalTransaction=false</span><br><span class="line">/seata=service.enableDegrade=false</span><br><span class="line">/seata=service.vgroupMapping.provider-service-group=default</span><br><span class="line">/seata=service.vgroupMapping.consumer-service-group=default</span><br><span class="line">/seata=store.db.branchTable=branch_table</span><br><span class="line">/seata=store.db.datasource=dbcp</span><br><span class="line">/seata=store.db.dbType=mysql</span><br><span class="line">/seata=store.db.driverClassName=com.mysql.cj.jdbc.Driver</span><br><span class="line">/seata=store.db.globalTable=global_table</span><br><span class="line">/seata=store.db.lockTable=lock_table</span><br><span class="line">/seata=store.db.maxConn=3</span><br><span class="line">/seata=store.db.minConn=1</span><br><span class="line">/seata=store.db.password=123456</span><br><span class="line">/seata=store.db.queryLimit=100</span><br><span class="line">/seata=store.db.url=jdbc:mysql://127.0.0.1:3306/cloud?useUnicode=true</span><br><span class="line">/seata=store.db.user=root</span><br><span class="line">/seata=store.file.dir=file_store/data</span><br><span class="line">/seata=store.file.fileWriteBufferCacheSize=16384</span><br><span class="line">/seata=store.file.flushDiskMode=async</span><br><span class="line">/seata=store.file.maxBranchSessionSize=16384</span><br><span class="line">/seata=store.file.maxGlobalSessionSize=512</span><br><span class="line">/seata=store.file.sessionReloadReadSize=100</span><br><span class="line">/seata=store.mode=db</span><br><span class="line">/seata=transport.compressor=none</span><br><span class="line">/seata=transport.enableClientBatchSendRequest=false</span><br><span class="line">/seata=transport.heartbeat=true</span><br><span class="line">/seata=transport.serialization=seata</span><br><span class="line">/seata=transport.server=NIO</span><br><span class="line">/seata=transport.shutdown.wait=3</span><br><span class="line">/seata=transport.threadFactory.bossThreadPrefix=NettyBoss</span><br><span class="line">/seata=transport.threadFactory.bossThreadSize=1</span><br><span class="line">/seata=transport.threadFactory.clientSelectorThreadPrefix=NettyClientSelector</span><br><span class="line">/seata=transport.threadFactory.clientSelectorThreadSize=1</span><br><span class="line">/seata=transport.threadFactory.clientWorkerThreadPrefix=NettyClientWorkerThread</span><br><span class="line">/seata=transport.threadFactory.serverExecutorThreadPrefix=NettyServerBizHandler</span><br><span class="line">/seata=transport.threadFactory.shareBossWorker=false</span><br><span class="line">/seata=transport.threadFactory.workerThreadPrefix=NettyServerNIOWorker</span><br><span class="line">/seata=transport.threadFactory.workerThreadSize=default</span><br><span class="line">/seata=transport.type=TCP</span><br></pre></td></tr></table></figure><p>每新加一个服务就要导入一个新的配置，xxx可以自定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/seata=service.vgroupMapping.xxx=default</span><br></pre></td></tr></table></figure><h4 id="5-新增seata的yml配置到provider和consumer"><a href="#5-新增seata的yml配置到provider和consumer" class="headerlink" title="5. 新增seata的yml配置到provider和consumer"></a>5. 新增seata的yml配置到provider和consumer</h4><h5 id="provider-yml"><a href="#provider-yml" class="headerlink" title="provider yml"></a>provider yml</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">seata:</span><br><span class="line">  enabled: true</span><br><span class="line">  application-id: provider-seata</span><br><span class="line">  tx-service-group: provider-service-group # 事务群组（可以每个应用独立取名，也可以使用相同的名字）这个群组名一定要和上面的seata=service.vgroupMapping中的xxx相等</span><br><span class="line">  client:</span><br><span class="line">    rm-report-success-enable: true</span><br><span class="line">    rm-table-meta-check-enable: false # 自动刷新缓存中的表结构（默认false）</span><br><span class="line">    rm-report-retry-count: 5 # 一阶段结果上报TC重试次数（默认5）</span><br><span class="line">    rm-async-commit-buffer-limit: 10000 # 异步提交缓存队列长度（默认10000）</span><br><span class="line">    rm:</span><br><span class="line">      lock:</span><br><span class="line">        lock-retry-internal: 10 # 校验或占用全局锁重试间隔（默认10ms）</span><br><span class="line">        lock-retry-times: 30 # 校验或占用全局锁重试次数（默认30）</span><br><span class="line">        lock-retry-policy-branch-rollback-on-conflict: true # 分支事务与其它全局回滚事务冲突时锁策略（优先释放本地锁让回滚成功）</span><br><span class="line">    tm-commit-retry-count: 3 # 一阶段全局提交结果上报TC重试次数（默认1次，建议大于1）</span><br><span class="line">    tm-rollback-retry-count: 3 # 一阶段全局回滚结果上报TC重试次数（默认1次，建议大于1）</span><br><span class="line">    undo:</span><br><span class="line">      undo-data-validation: true # 二阶段回滚镜像校验（默认true开启）</span><br><span class="line">      undo-log-serialization: jackson # undo序列化方式（默认jackson）</span><br><span class="line">      undo-log-table: undo_log  # 自定义undo表名（默认undo_log）</span><br><span class="line">    support:</span><br><span class="line">      spring:</span><br><span class="line">        datasource-autoproxy: true</span><br><span class="line">  service:</span><br><span class="line">    vgroup-mapping:</span><br><span class="line">      my_test_tx_group: default # TC 集群（必须与seata-server保持一致）</span><br><span class="line">    enable-degrade: false # 降级开关</span><br><span class="line">    disable-global-transaction: false # 禁用全局事务（默认false）</span><br><span class="line">    grouplist:</span><br><span class="line">      default: 127.0.0.1:8091</span><br><span class="line">  transport:</span><br><span class="line">    shutdown:</span><br><span class="line">      wait: 3</span><br><span class="line">    thread-factory:</span><br><span class="line">      boss-thread-prefix: NettyBoss</span><br><span class="line">      worker-thread-prefix: NettyServerNIOWorker</span><br><span class="line">      server-executor-thread-prefix: NettyServerBizHandler</span><br><span class="line">      share-boss-worker: false</span><br><span class="line">      client-selector-thread-prefix: NettyClientSelector</span><br><span class="line">      client-selector-thread-size: 1</span><br><span class="line">      client-worker-thread-prefix: NettyClientWorkerThread</span><br><span class="line">    type: TCP</span><br><span class="line">    server: NIO</span><br><span class="line">    heartbeat: true</span><br><span class="line">    serialization: seata</span><br><span class="line">    compressor: none</span><br><span class="line">    enable-client-batch-send-request: true # 客户端事务消息请求是否批量合并发送（默认true）</span><br><span class="line">  registry:</span><br><span class="line">    file:</span><br><span class="line">      name: file.conf</span><br><span class="line">    type: zk</span><br><span class="line">    zk:</span><br><span class="line">      server-addr: 127.0.0.1:2181</span><br><span class="line">  config:</span><br><span class="line">    file:</span><br><span class="line">      name: file.conf</span><br><span class="line">    type: zk</span><br><span class="line">    zk:</span><br><span class="line">      server-addr: 127.0.0.1:2181</span><br></pre></td></tr></table></figure><h5 id="consumer-yml"><a href="#consumer-yml" class="headerlink" title="consumer yml"></a>consumer yml</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">seata:</span><br><span class="line">  enabled: true</span><br><span class="line">  application-id: consumer-seata</span><br><span class="line">  tx-service-group: consumer-service-group # 事务群组（可以每个应用独立取名，也可以使用相同的名字）这个群组名一定要和上面的seata=service.vgroupMapping中的xxx相等</span><br><span class="line">  client:</span><br><span class="line">    rm-report-success-enable: true</span><br><span class="line">    rm-table-meta-check-enable: false # 自动刷新缓存中的表结构（默认false）</span><br><span class="line">    rm-report-retry-count: 5 # 一阶段结果上报TC重试次数（默认5）</span><br><span class="line">    rm-async-commit-buffer-limit: 10000 # 异步提交缓存队列长度（默认10000）</span><br><span class="line">    rm:</span><br><span class="line">      lock:</span><br><span class="line">        lock-retry-internal: 10 # 校验或占用全局锁重试间隔（默认10ms）</span><br><span class="line">        lock-retry-times: 30 # 校验或占用全局锁重试次数（默认30）</span><br><span class="line">        lock-retry-policy-branch-rollback-on-conflict: true # 分支事务与其它全局回滚事务冲突时锁策略（优先释放本地锁让回滚成功）</span><br><span class="line">    tm-commit-retry-count: 3 # 一阶段全局提交结果上报TC重试次数（默认1次，建议大于1）</span><br><span class="line">    tm-rollback-retry-count: 3 # 一阶段全局回滚结果上报TC重试次数（默认1次，建议大于1）</span><br><span class="line">    undo:</span><br><span class="line">      undo-data-validation: true # 二阶段回滚镜像校验（默认true开启）</span><br><span class="line">      undo-log-serialization: jackson # undo序列化方式（默认jackson）</span><br><span class="line">      undo-log-table: undo_log  # 自定义undo表名（默认undo_log）</span><br><span class="line">    support:</span><br><span class="line">      spring:</span><br><span class="line">        datasource-autoproxy: true</span><br><span class="line">  service:</span><br><span class="line">    vgroup-mapping:</span><br><span class="line">      my_test_tx_group: default # TC 集群（必须与seata-server保持一致）</span><br><span class="line">    enable-degrade: false # 降级开关</span><br><span class="line">    disable-global-transaction: false # 禁用全局事务（默认false）</span><br><span class="line">    grouplist:</span><br><span class="line">      default: 127.0.0.1:8091</span><br><span class="line">  transport:</span><br><span class="line">    shutdown:</span><br><span class="line">      wait: 3</span><br><span class="line">    thread-factory:</span><br><span class="line">      boss-thread-prefix: NettyBoss</span><br><span class="line">      worker-thread-prefix: NettyServerNIOWorker</span><br><span class="line">      server-executor-thread-prefix: NettyServerBizHandler</span><br><span class="line">      share-boss-worker: false</span><br><span class="line">      client-selector-thread-prefix: NettyClientSelector</span><br><span class="line">      client-selector-thread-size: 1</span><br><span class="line">      client-worker-thread-prefix: NettyClientWorkerThread</span><br><span class="line">    type: TCP</span><br><span class="line">    server: NIO</span><br><span class="line">    heartbeat: true</span><br><span class="line">    serialization: seata</span><br><span class="line">    compressor: none</span><br><span class="line">    enable-client-batch-send-request: true # 客户端事务消息请求是否批量合并发送（默认true）</span><br><span class="line">  registry:</span><br><span class="line">    file:</span><br><span class="line">      name: file.conf</span><br><span class="line">    type: zk</span><br><span class="line">    zk:</span><br><span class="line">      server-addr: 127.0.0.1:2181</span><br><span class="line">  config:</span><br><span class="line">    file:</span><br><span class="line">      name: file.conf</span><br><span class="line">    type: zk</span><br><span class="line">    zk:</span><br><span class="line">      server-addr: 127.0.0.1:2181</span><br></pre></td></tr></table></figure><h4 id="6-下载seata并修改配置文件"><a href="#6-下载seata并修改配置文件" class="headerlink" title="6. 下载seata并修改配置文件"></a>6. 下载seata并修改配置文件</h4><h5 id="修改file-conf"><a href="#修改file-conf" class="headerlink" title="修改file.conf"></a>修改file.conf</h5><p><img src="https://s4.ax1x.com/2022/01/07/7peqN4.png" alt="按照图中标识修改配置文件中的参数"></p><h5 id="修改registry-conf"><a href="#修改registry-conf" class="headerlink" title="修改registry.conf"></a>修改registry.conf</h5><p><img src="https://s4.ax1x.com/2022/01/07/7pebEF.png" alt="按照图中标识修改配置文件中的参数"></p><h4 id="7-各个子服务的数据库导入seata的sql"><a href="#7-各个子服务的数据库导入seata的sql" class="headerlink" title="7. 各个子服务的数据库导入seata的sql"></a>7. 各个子服务的数据库导入seata的sql</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> Navicat Premium Data Transfer</span><br><span class="line"></span><br><span class="line"> Source Server Type    : MySQL</span><br><span class="line"> Source Server Version : 80025</span><br><span class="line"></span><br><span class="line"> Target Server Type    : MySQL</span><br><span class="line"> Target Server Version : 80025</span><br><span class="line"> File Encoding         : 65001</span><br><span class="line"></span><br><span class="line"> Date: 02/01/2022 10:57:18</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS = 0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for branch_table</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `branch_table`;</span><br><span class="line">CREATE TABLE `branch_table`  (</span><br><span class="line">  `branch_id` bigint NOT NULL,</span><br><span class="line">  `xid` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,</span><br><span class="line">  `transaction_id` bigint NULL DEFAULT NULL,</span><br><span class="line">  `resource_group_id` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `resource_id` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `lock_key` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `branch_type` varchar(8) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `status` tinyint NULL DEFAULT NULL,</span><br><span class="line">  `client_id` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `application_data` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `gmt_create` datetime NULL DEFAULT NULL,</span><br><span class="line">  `gmt_modified` datetime NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`branch_id`) USING BTREE,</span><br><span class="line">  INDEX `idx_xid`(`xid`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for global_table</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `global_table`;</span><br><span class="line">CREATE TABLE `global_table`  (</span><br><span class="line">  `xid` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,</span><br><span class="line">  `transaction_id` bigint NULL DEFAULT NULL,</span><br><span class="line">  `status` tinyint NOT NULL,</span><br><span class="line">  `application_id` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `transaction_service_group` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `transaction_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `timeout` int NULL DEFAULT NULL,</span><br><span class="line">  `begin_time` bigint NULL DEFAULT NULL,</span><br><span class="line">  `application_data` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `gmt_create` datetime NULL DEFAULT NULL,</span><br><span class="line">  `gmt_modified` datetime NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`xid`) USING BTREE,</span><br><span class="line">  INDEX `idx_gmt_modified_status`(`gmt_modified`, `status`) USING BTREE,</span><br><span class="line">  INDEX `idx_transaction_id`(`transaction_id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for lock_table</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `lock_table`;</span><br><span class="line">CREATE TABLE `lock_table`  (</span><br><span class="line">  `row_key` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,</span><br><span class="line">  `xid` varchar(96) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `transaction_id` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL,</span><br><span class="line">  `branch_id` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL,</span><br><span class="line">  `resource_id` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `table_name` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `pk` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `gmt_create` datetime NULL DEFAULT NULL,</span><br><span class="line">  `gmt_modified` datetime NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`row_key`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for undo_log</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `undo_log`;</span><br><span class="line">CREATE TABLE `undo_log`  (</span><br><span class="line">  `id` bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `branch_id` bigint NOT NULL,</span><br><span class="line">  `xid` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  `context` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  `rollback_info` longblob NOT NULL,</span><br><span class="line">  `log_status` int NOT NULL,</span><br><span class="line">  `log_created` datetime NOT NULL,</span><br><span class="line">  `log_modified` datetime NOT NULL,</span><br><span class="line">  `ext` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE,</span><br><span class="line">  UNIQUE INDEX `ux_undo_log`(`xid`, `branch_id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB AUTO_INCREMENT = 30 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS = 1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行seata-server.sh，在需要保持事务的Service加上@GlobalTransactional即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> zookeeper </tag>
            
            <tag> 分布式事务 </tag>
            
            <tag> seata </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写Linux中frp自启动脚本</title>
      <link href="/2021/12/01/1/"/>
      <url>/2021/12/01/1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>家里有台闲置树莓派和轻量云的服务器顺手折腾一下</p></blockquote><h2 id="1-启动服务"><a href="#1-启动服务" class="headerlink" title="1. 启动服务"></a>1. 启动服务</h2><p>设置服务名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /lib/systemd/system/frps.service</span><br></pre></td></tr></table></figure><p>写入下列代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=frps service</span><br><span class="line">#前置服务</span><br><span class="line">After=network.target syslog.target</span><br><span class="line">#后置服务</span><br><span class="line">Wants=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">Restart=always #当程序退出时，自动重启。</span><br><span class="line">#可以使用非root用户启动，此处我没有设置用户组则注释调</span><br><span class="line">#User=frp</span><br><span class="line">#Group=frp</span><br><span class="line">#启动服务的命令（此处写你的frps的实际安装目录）</span><br><span class="line">ExecStart=~/frp/frps -c ~/frp/frps.ini</span><br><span class="line">ExecStop=/bin/kill $MAINPID</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>刷新服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>服务自启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable frps</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart frps</span><br></pre></td></tr></table></figure><h2 id="2-删除服务"><a href="#2-删除服务" class="headerlink" title="2. 删除服务"></a>2. 删除服务</h2><p>生成的软连接所在位置，一般在需要删除该自启动脚本时同时删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/systemd/system/multi-user.target.wants/frps.service</span><br><span class="line"></span><br><span class="line">/usr/lib/systemd/system/frps.service</span><br></pre></td></tr></table></figure><p>frp部署文档参考 👉 <a href="https://gofrp.org/docs/setup/">《安装frp》</a>- frp官方文档</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人技能网-待补充掌握程度</title>
      <link href="/2021/10/01/1/"/>
      <url>/2021/10/01/1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>知识和知识之间是有联系的。</p></blockquote><h4 id="精通（待完善）"><a href="#精通（待完善）" class="headerlink" title="精通（待完善）"></a>精通（待完善）</h4><h4 id="熟练（待完善）"><a href="#熟练（待完善）" class="headerlink" title="熟练（待完善）"></a>熟练（待完善）</h4><h4 id="生疏（待完善）"><a href="#生疏（待完善）" class="headerlink" title="生疏（待完善）"></a>生疏（待完善）</h4><h4 id="了解（待完善）"><a href="#了解（待完善）" class="headerlink" title="了解（待完善）"></a>了解（待完善）</h4><h4 id="耳闻（待完善）"><a href="#耳闻（待完善）" class="headerlink" title="耳闻（待完善）"></a>耳闻（待完善）</h4><p><img src="https://z3.ax1x.com/2021/11/09/It1R3Q.png" alt="个人技能网"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>galgame</title>
      <link href="/2021/09/04/1/"/>
      <url>/2021/09/04/1/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f71b9590cc8c0ecae111fdee18f71a80d8ba09537267dc3c044b9f24dedb139f">57e3e5b92af35a85847f4f612049df72ba6fecd7294c5448ee798137a63b91aa</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> galgame </tag>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务链路追踪SkyWalking</title>
      <link href="/2021/05/02/1/"/>
      <url>/2021/05/02/1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>SkyWalking超级简单的微服务链路追踪框架</p></blockquote><h4 id="1-下载安装包"><a href="#1-下载安装包" class="headerlink" title="1. 下载安装包"></a>1. 下载安装包</h4><p>SkyWalking<a href="https://skywalking.apache.org/downloads/">下载地址</a>，看了好多博客没一个描述清楚要下载哪个文件的，我自己也搞了半天，就是下图它兄弟俩都要下载，第一个是SkyWalking的服务，第二个是Java的扩展。</p><p><a href="https://imgtu.com/i/7eB7vV"><img src="https://s4.ax1x.com/2022/01/11/7eB7vV.md.png" alt="7eB7vV.md.png"></a></p><h4 id="2-修改启动参数"><a href="#2-修改启动参数" class="headerlink" title="2. 修改启动参数"></a>2. 修改启动参数</h4><p>首先解压<strong>SkyWalking Java Agent</strong>文件，找到<strong>skywalking-agent.jar</strong>，记下所在位置。然后修改idea中项目的启动配置，点击idea中的Edit Configurations…。点击需要加入链路追踪的服务，将下列参数如图所示分别加入VM options和Environment variables中。需要链路追踪能查看其他服务则按照上面所述依次添加启动参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:D:\\tools\\skywalking-agent\\skywalking-agent.jar</span><br><span class="line">SW_AGENT_NAME=cloud-auth;SW_AGENT_COLLECTOR_BACKEND_SERVICES=127.0.0.1:11800</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/7ecFNF"><img src="https://s4.ax1x.com/2022/01/11/7ecFNF.md.png" alt="7ecFNF.md.png"></a></p><p>然后解压打开<strong>SkyWalking APM</strong>的下载包，解压后进入文件夹下的bin目录，windows就执行startup.bat，linux就执行startup.sh。</p><p>最后启动各个微服务，在项目启动时当打印出来以下类似的日志时，则代表SkyWalking启动成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main AgentPackagePath : The beacon class location is jar:file:/D:/tools/skywalking-agent/skywalking-agent.jar!/org/apache/skywalking/apm/agent/core/boot/AgentPackagePath.class.</span><br><span class="line">main SnifferConfigInitializer : Config file found in D:\tools\skywalking-agent\config\agent.config.</span><br></pre></td></tr></table></figure><h4 id="3-查看启动效果"><a href="#3-查看启动效果" class="headerlink" title="3. 查看启动效果"></a>3. 查看启动效果</h4><p>SkyWalking中发现服务速度有些慢，稍等片刻后访问<strong>SkyWalking APM</strong>所在网络下的localhost:8080即可，页面效果如下图。</p><p><a href="https://imgtu.com/i/7eRjaV"><img src="https://s4.ax1x.com/2022/01/11/7eRjaV.md.png" alt="7eRjaV.md.png"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> 监控 </tag>
            
            <tag> SkyWalking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty应用以及Server端启动源码（一）</title>
      <link href="/2021/01/02/1/"/>
      <url>/2021/01/02/1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Netty是基于事件处理的高性能异步非阻塞网络框架，Zookeeper、Dubbo、RocketMQ底层都有Netty的影子，是网络编程的基石，需要熟练掌握，本章会介绍NIO相关知识和Netty Server端源码</p></blockquote><h2 id="1-NIO"><a href="#1-NIO" class="headerlink" title="1. NIO"></a>1. NIO</h2><h4 id="1-1-运行状态和异步同步"><a href="#1-1-运行状态和异步同步" class="headerlink" title="1.1 运行状态和异步同步"></a>1.1 运行状态和异步同步</h4><p>泡茶例子：</p><ul><li>同步：自己来烧水，自己来泡茶；</li><li>异步：自己烧水，然后走了换另一个人来泡茶；</li><li>阻塞：自己来烧水，自己需要站在原地等水烧开；</li><li>非阻塞：自己来烧水，自己可以在烧水途中做其他的事情；</li></ul><h4 id="1-2-网络IO"><a href="#1-2-网络IO" class="headerlink" title="1.2 网络IO"></a>1.2 网络IO</h4><ul><li>BIO：blocking I&#x2F;O，阻塞性IO，需要当客户端发送请求之前则建立一个阻塞线程，去监听端口，待请求建立连接后继续阻塞，待客户端发送数据后再处理数据，适用于连接数固定且较小的项目中；</li><li>NIO：new I&#x2F;O，使用单独的线程进行轮询是否有人建立连接，当建立了连接后才会丢给工作线程组，让线程组以块的模式来处理客户端数据，适用于连接数较大且连接时长较短的业务；</li><li>AIO：asynchronous I&#x2F;O，完全异步的处理内核态的客户端数据，无需关心建立连接的细节，只需要根据系统通知进行事件处理即可，适用于连接数较大且连接时长较长的业务，用于系统调用比较多的场景，例如文件下载；</li></ul><h4 id="1-3-Reactor模式"><a href="#1-3-Reactor模式" class="headerlink" title="1.3 Reactor模式"></a>1.3 Reactor模式</h4><p>主要分为reactor和handler，reactor用来处理客户端连接，handler用来负责处理相关请求。</p><h2 id="2-Netty-Server端启动源码"><a href="#2-Netty-Server端启动源码" class="headerlink" title="2. Netty Server端启动源码"></a>2. Netty Server端启动源码</h2><h4 id="2-1-声明线程组"><a href="#2-1-声明线程组" class="headerlink" title="2.1 声明线程组"></a>2.1 声明线程组</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 初始化工作线程组</span><br><span class="line">NioEventLoopGroup workerGroup = new NioEventLoopGroup();</span><br></pre></td></tr></table></figure><p>EventLoopGroup：线程池，如果不设置内部线程数则默认为CPU核数和两倍，内部存放EventExecutor数组，每个数组存放一个初始化完成了的NioEventLoop对象。<br>NioEventLoop：本质上是一个线程，因为其继承SingleThreadEbentLoop，在初始化时设置Selector和TaskQueue，Selector为多路复用器，TaskQueue为任务队列。</p><h4 id="2-2-初始化ServerBootstrap并设置参数"><a href="#2-2-初始化ServerBootstrap并设置参数" class="headerlink" title="2.2 初始化ServerBootstrap并设置参数"></a>2.2 初始化ServerBootstrap并设置参数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 设置ServerBootstrap相关的Channel和EventLoopGroup线程池</span><br><span class="line">ServerBootstrap serverBootstrap = bootstrap.group(bossGroup, workerGroup)</span><br><span class="line">        .channel(NioServerSocketChannel.class)</span><br><span class="line">        .handler(new LoggingHandler(LogLevel.INFO))</span><br><span class="line">        .childHandler(initializer);</span><br></pre></td></tr></table></figure><p>设置ServerBootstrap的Channel类型为NioServerSocketChannel，设置handler。</p><h4 id="2-3-初始化Channel并监听Selector"><a href="#2-3-初始化Channel并监听Selector" class="headerlink" title="2.3 初始化Channel并监听Selector"></a>2.3 初始化Channel并监听Selector</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 初始化Channel并绑定端口</span><br><span class="line">Channel channel = serverBootstrap.bind(port).sync().channel();</span><br><span class="line">...</span><br><span class="line">// 设置Channel只关注连接事件</span><br><span class="line">public NioServerSocketChannel(ServerSocketChannel channel) &#123;</span><br><span class="line">    super(null, channel, SelectionKey.OP_ACCEPT);</span><br><span class="line">    config = new NioServerSocketChannelConfig(this, javaChannel().socket());</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">// 设置当前SelectableChannel为非阻塞</span><br><span class="line">ch.configureBlocking(false);</span><br><span class="line">...</span><br><span class="line">// 通过反射创建Channel对象并完成Channel自己的初始化</span><br><span class="line">channel = channelFactory.newChannel();</span><br></pre></td></tr></table></figure><p>执行绑定事件，在AbstractBootstrap中执行doBind方法，进入AbstractBootstrap中调用initAndRegister方法，进行初始化ServerBootstrap和进行注册。NioServerSocketChannel本质上就是Java NIO中的ServerSocketChannel。通过上面指定的Channel类型为NioServerSocketChannel.class来生成NioServerSocketChannel作为ServerBootstrap中的Channel。将Channel和ServerBootstrap绑定，并初始化Channel只关注SelectionKey.OP_ACCEPT事件，并在初始化过程中设置SelectableChannel的阻塞状态为非阻塞。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// workerGroup</span><br><span class="line">final EventLoopGroup currentChildGroup = childGroup;</span><br><span class="line">// 自定义的handler</span><br><span class="line">final ChannelHandler currentChildHandler = childHandler;</span><br><span class="line">...</span><br><span class="line">p.addLast(new ChannelInitializer&lt;Channel&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void initChannel(final Channel ch) &#123;</span><br><span class="line">        final ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">        ChannelHandler handler = config.handler();</span><br><span class="line">        if (handler != null) &#123;</span><br><span class="line">            pipeline.addLast(handler);</span><br><span class="line">        &#125;</span><br><span class="line">        // 设置Channel中EventLoop中各个线程都需要初始化其中的ChannelPipline并且新构建一个ServerBootstrapAccpetor进去</span><br><span class="line">        // ServerBootstrapAccpetor是ChannelInboundHandlerAdapter的子类，所以在Channel收到网络请求时会依次执行其中的方法</span><br><span class="line">        ch.eventLoop().execute(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                pipeline.addLast(new ServerBootstrapAcceptor(</span><br><span class="line">                        ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>之后将childHandler方法中的pipeline和原有的handler转换为Channel中的ChannelPipeline对象，ChannelPipeline本质上是一个Map&lt;String, ChannelHandler&gt;，将Channel中各个EventLoop中的ChannelPipeline都初始化了一个ServerBootstrapAcceptor，相当于初始化请求链路并在其中新增了一个自己的处理逻辑，并将Channel中的子线程组、自定义拦截器、自定义属性、自定义参数都放入初始化的Acceptor中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Group注册到Channel上</span><br><span class="line">ChannelFuture regFuture = config().group().register(channel);</span><br><span class="line">...</span><br><span class="line">// next方法是依次获取当前EventGroup中的所有线程</span><br><span class="line">@Override</span><br><span class="line">public ChannelFuture register(Channel channel) &#123;</span><br><span class="line">    return next().register(channel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将Group注册到Channel上，返回一个ChannelFuture对象来进行监听回调处理。<br>channel.closeFuture().sync();</p>]]></content>
      
      
      
        <tags>
            
            <tag> Netty </tag>
            
            <tag> 后端 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库原理剖析和优化</title>
      <link href="/2020/05/02/1/"/>
      <url>/2020/05/02/1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数据库是Web开发中必不可少的一环，需要加强基础知识的学习和总结项目中出现的问题。难点主要在索引和分布式事务上，由于本人项目过程中使用的数据库多为MySQL和MariaDB，所以以下内容所使用的数据库环境均为MySQL</p></blockquote><h2 id="1-数据库底层原理"><a href="#1-数据库底层原理" class="headerlink" title="1. 数据库底层原理"></a>1. 数据库底层原理</h2><h4 id="1-1-数据存储方式"><a href="#1-1-数据存储方式" class="headerlink" title="1.1 数据存储方式"></a>1.1 数据存储方式</h4><p>数据库中InnoDB和MyISAM存储引擎底层采用的存储方式为B+树，下面列举一下各个数据结构在数据存储时的演变过程。</p><ul><li>数组：查询快，插入速度慢；</li><li>链表：查询慢，插入速度快；</li><li>二叉树：查询速度快，插入速度快，但是极端情况会变成链表，会大幅降低查询效率，例如树的节点为1（根节点）、2、3、4、5、6时且一个节点只有两个子节点存储效率太差；</li><li>HASH表：将数据进行HASH运算，将运算完成后的结果存入地址，当存在碰撞时，将地址中的数据以链表的形式存储，缺点因为数据是计算后存储的，所以在范围查询时会效率低下，一般用于Memory引擎（一种完全存储在内存中的存储引擎）；</li><li>红黑树：查询速度快，插入速度慢，使用树旋转优化了二叉树的极端情况，也就是当存在1、2、3、4、5、6时，会将根节点优化为3，然后层级降低为三层，但是频繁旋转的时候会导致插入速度较慢；</li><li>B树：查询速度快，插入速度快，使用B树将子节点中的内容进行范围划分，且固定层级为三级。但是其中的数据都存在节点内，所以节点数据存储量太小，内存加载数据页时可容纳的数据也较少；</li><li>B+树：查询速度快，插入速度快，在具备B树所有优点同时还将数据存入子节点，相邻的叶子节点之间头尾相连，在数据被使用时那么它附近的数据也会被使用，可以预加载到内存中；</li></ul><p>在不同的存储引擎中B+树的存储方式也有所不同，InnoDB是采用聚集索引，MyISAM是采用非聚集索引。InnoDB有且必须要有一个聚集索引，一般是主键，没有主键则是第一个非空字段。</p><h4 id="1-2-主要构成"><a href="#1-2-主要构成" class="headerlink" title="1.2 主要构成"></a>1.2 主要构成</h4><p>一个完整的数据库服务具备模块如下：</p><ul><li>客户端<ul><li>数据库驱动</li><li>连接池</li></ul></li><li>服务端<ul><li>连接器</li><li>分析器</li><li>优化器</li><li>执行器</li><li>存储引擎</li></ul></li></ul><blockquote><p>详细流程：数据库驱动通过连接池和服务器的连接器相连，当客户端接受到数据时，会将数据发送至服务端，服务端通过连接器接受客户端的数据，需要查询的数据是否在内存中，在内存中则返回，不在内存中则通过分析器分析，分析后交给优化器优化语句为AST tree（抽象语法树）后再交给执行器执行语句，从存储引擎中拉取数据。</p></blockquote><p><img src="https://z3.ax1x.com/2021/11/09/It3a5T.png" alt="数据库查询执行流程"></p><h4 id="1-3-数据库性能测试"><a href="#1-3-数据库性能测试" class="headerlink" title="1.3 数据库性能测试"></a>1.3 数据库性能测试</h4><p>在拿到数据库服务后，首先需要针对数据库进行压测，比较常用的压测工具有sysbench，它目前支持主流的Oracle、MySQL和PostgreSQL等数据库。</p><p>数据库性能测试指标主要有CPU、内存、磁盘读写率、网络吞吐率几个指标，需要对数据库读写请求成功数和事务完成数有一个大概的估算，在面对高并发的情况时能够合理的分析数据库的负载能力。</p><h2 id="2-数据库优化方式"><a href="#2-数据库优化方式" class="headerlink" title="2. 数据库优化方式"></a>2. 数据库优化方式</h2><h4 id="2-1-优化目标"><a href="#2-1-优化目标" class="headerlink" title="2.1 优化目标"></a>2.1 优化目标</h4><p>数据库的优化主要针对与查询中的慢SQL，可以通过打开配置文件中的记录慢SQL功能，针对慢SQL进行统计，找到慢SQL后使用explain关键字对SQL进行解析，结果中的关键字段分别是type（连接类型）、key（查询时使用的索引）、rows（估算出来的结果行数）、Extra（执行情况说明）。</p><p>其中需要额外注意type返回的结果，返回结果有ALL、index、range、 ref、eq_ref、const、system、NULL（指当前查询语句的性能从差到好，一般是认为range则是合格），row则是对结果数据条数的估算，该值是越小越好。Extra则是对查询结果的一个说明，其中using where则是说明该查询使用where进行筛选，using index则是触发了索引覆盖即当前查询内容只需要搜索一次索引树即可查到需要的数据，using index condition则是触发回表效率较低。</p><h4 id="2-2-数据库查询优化"><a href="#2-2-数据库查询优化" class="headerlink" title="2.2 数据库查询优化"></a>2.2 数据库查询优化</h4><p>最左匹配原则：越靠近where的条件，会越有限和索引匹配，当遇到了范围查询（&gt;、&lt;、between）或者like关键字时，会停止命中索引，实际操作中将索引一律靠近where条件即可；</p><p>索引选取规范：索引需要区分度较高，区分度的计算公式为（distinct cloumn）&#x2F;count(cloumn)，比率越大则数据越少，一般推荐值为0.1以上；</p><p>回表：索引列中未查出select中所需要的字段需要二次进入聚集索引，依据主键查到数据源，相当于经历了两次B+树的搜索，效率很低下，需要避免；索引覆盖则是针对回表的优化，将查询中未命中的索引建立联合索引，避免依据索引无法查出完整数据导致的回表；</p><p>索引下推：MySQL5.6优化后查询索引树时会将所有的where判断索引条件都加上，查出结果集，如果不符合结果则直接放弃该条数据。而不是在之前版本中会查出符合第一个where条件的结果再依次使用where条件进行回表查询；</p><p>索引合并：MySQL5.1优化后查询可以使用多个索引一起使用；</p><p>join原理：<br>最基础的索引，等于双重for循环，将两张表的内存进行循环然后查询结果集。<br>当join中的on条件为索引时，会将最外层表的数据查询出来后使用索引去查内层表，顶多只需要三次IO查询索引树即可查到结果；<br>当join中的on条件不为索引时，会让任意一张表作为驱动表，然后将结果集存入join buffer，然后使用join buffer中的内容扫描另一张表；</p><p>join优化：<br>减少join中的条件数据，减少多次连接，按照机器性能新增join buffer大小；</p><h4 id="2-3-数据库存储优化"><a href="#2-3-数据库存储优化" class="headerlink" title="2.3 数据库存储优化"></a>2.3 数据库存储优化</h4><p>能用小字段尽量用小字段，varchar是变长的，随着字段存储内容的变多会变长。禁止在数据库内存储文件，如果有需要存储文件的业务时，需要把文件放入文件服务器中供系统访问和下载。</p><h2 id="3-数据库锁和分布式事务"><a href="#3-数据库锁和分布式事务" class="headerlink" title="3. 数据库锁和分布式事务"></a>3. 数据库锁和分布式事务</h2><h4 id="3-1-锁"><a href="#3-1-锁" class="headerlink" title="3.1 锁"></a>3.1 锁</h4><p>数据库锁一般是读写锁，读锁后只能加读锁，不能加写锁。加了写锁后其他任何读锁、写锁都无法加入，使用了MVCC机制进行了优化；</p><p>InnoDB：有行锁和表锁，有索引则触发行锁，没有则是表锁；<br>MyISAM：只有表锁；</p><h4 id="3-2-事务"><a href="#3-2-事务" class="headerlink" title="3.2 事务"></a>3.2 事务</h4><p>事物的四大特征ACID，在InnoDB中：</p><blockquote><p>原子性（Atomicity）：使用undo log来实现；</p><p>一致性（Consistency）：使用A、I、D配合实现；</p><p>隔离性（Isolation）：使用数据库中的事务隔离级别来实现；</p><p>持久性（Durability）：使用redo log来实现；</p></blockquote><p>事务隔离级别</p><ul><li>读未提交：读到对方未提交的事务；</li><li>读已提交：两次读的内容不同，第二次读到的事务为已提交的内容，也叫不可重复读；</li><li>可重复读：两次读的内容都是一样的，无论第二次事务有没有提交，只要当前事务未提交，就只能读取当前事务的数据；</li><li>幻读：第一次只查询到一条数据但是第二次查询查到了另一个事务提交的数据；</li><li>串行化：事务之间互斥，只有第一个事务提交后后续事务才能依次执行。</li></ul><p>MVCC：mysql innodb存储引擎默认隔离级别是可重复读，mysql实现可重复读使用的是mvcc机制(多版本并发控制)。就是在读的时候都加上版本号，只有当其他事务提交后，才更新最新的版本号，实现原理是使用undo log。</p><p>分布式事务</p><ol><li><p>CAP定理：</p><ul><li><p>C - Consistency，一致性</p></li><li><p>A - Availability，可用性</p></li><li><p>P - Partition tolerance，分区容忍性</p></li></ul><p> CAP定理，由于分布式的存在，所以在三个特性中必须满足P，即分区容忍性，在不同的网络环境中的互相通讯的节点服务死亡后不会影响其他服务。而A和C不能共存，则衍生出来了AP、CP两种情况。</p><p> CP：服务和服务之间保证了高强度的一致性，如果有服务死亡则通过投票或选举等措施等待数据同步，服务会有部分时间不可用；</p><p> AP：服务和服务之间为了保证可以对外提供访问则会，不关注多台服务上的数据是否同步的情况；</p></li><li><p>XA规范：</p><ul><li>AP：appliaction 应用程序</li><li>TM：truncation manager 事务管理器</li><li>RM：resource manager 资源管理器</li><li>CRM：communication resource manager 通讯资源管理器</li></ul></li><li><p>解决方案</p><ul><li>2PC方案</li><li>3PC方案</li><li>TCC方案</li><li>本地消息表方案</li><li>最终一致性方案</li><li>最大努力通知方案</li></ul></li></ol><h2 id="4-分库分表"><a href="#4-分库分表" class="headerlink" title="4. 分库分表"></a>4. 分库分表</h2><h4 id="4-1-概念"><a href="#4-1-概念" class="headerlink" title="4.1 概念"></a>4.1 概念</h4><blockquote><p>分而治之，将大规模的数据按照某种规律进行划分，垂直分表应该在设计表的时候根据业务都划分完毕，所以架构中需要处理的分表主要为水平分表</p></blockquote><h4 id="4-2-相关实现"><a href="#4-2-相关实现" class="headerlink" title="4.2 相关实现"></a>4.2 相关实现</h4><p>mysql分区表语法 PARTITION BY RANGE，建议分区列为可阶段性拆分列，例如时间，年龄，类别之类，使用sharding jdbc进行分库分表</p><h2 id="5-高可用"><a href="#5-高可用" class="headerlink" title="5. 高可用"></a>5. 高可用</h2><h4 id="5-1-读写分离"><a href="#5-1-读写分离" class="headerlink" title="5.1 读写分离"></a>5.1 读写分离</h4><ul><li><input disabled="" type="checkbox"> 待完成</li></ul><h2 id="6-Tips"><a href="#6-Tips" class="headerlink" title="6. Tips"></a>6. Tips</h2><h4 id="6-1-操作系统相关知识"><a href="#6-1-操作系统相关知识" class="headerlink" title="6.1 操作系统相关知识"></a>6.1 操作系统相关知识</h4><ul><li><input disabled="" type="checkbox"> 待完成</li></ul><h4 id="6-2-Docker部署相关常见问题点"><a href="#6-2-Docker部署相关常见问题点" class="headerlink" title="6.2 Docker部署相关常见问题点"></a>6.2 Docker部署相关常见问题点</h4><ol><li>时区需要调整到上海</li><li>默认开启了大小写校验，可按需更改</li></ol><h4 id="6-3-数据库连接池"><a href="#6-3-数据库连接池" class="headerlink" title="6.3 数据库连接池"></a>6.3 数据库连接池</h4><ol><li>navicat连接数据库需要把保持连接间隔降低到30s，默认时长为240s，会导致响应时间过长导致数据库连接被释放掉</li></ol><ul><li><input disabled="" type="checkbox"> 待完成</li></ul><p>参考文献：<br><a href="https://tech.meituan.com/2014/06/30/mysql-index.html">《MySQL索引原理及慢查询优化》</a>- 美团技术团队</p>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
